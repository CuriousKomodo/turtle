# -*- coding: utf-8 -*-
"""turtle_trading.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gBijPUM3tvZaRQ86k5sZ4l5OXX2K61e2
"""
import numpy as np
import pandas as pd
import yfinance as yf


"""# Get the list of stocks in the spreadsheet"""

list_of_existing_stocks = ["WAFU", "EEIQ", "GME", "OCG", "KUKE", "XERIS", "BNGO", "MOMO", "CODX",
                           "BOXL", "BLNK", "HOME", "MBII", "VNET", "APTO", "WGO", "SHIP", "KBH",
                           "NAVB", "APTX", "LIQT", "CLEU", "FEDU",
                           "MX"]  # INSERT STOCKS THAT YOU ARE INTERESTED HERE



def get_all_stock_info(stock: str):
    thestock = yf.Ticker(stock)
    market_cap = 0
    gross_profit = 0
    price = 0
    low = 0
    high = 0
    vol = 0
    market_vol = 0
    profit = 0
    action = 0
    ave_vol_10_days = 0
    try:
        market_cap = thestock.info['marketCap']
        gross_profit = thestock.get_financials().loc['Gross Profit'][0]
        # gross_profit_prev = thestock.get_financials().loc['Gross Profit'][1]
        # gross_profit_colour = 'green' if gross_profit>gross_profit_prev else 'red'

        vol = thestock.info['averageVolume']
        ave_vol_10_days = thestock.info['averageVolume10days']
        price = thestock.history(period='1d')['Close'][0]
        low = thestock.info['fiftyTwoWeekLow']
        high = thestock.info['fiftyTwoWeekHigh']
        # price = 'green' if price>prev_price else 'red'

        market_vol = vol * price
        if gross_profit > 0:
            profit = 100 - (vol * price * 100 / gross_profit)
        action = 'Buy' if gross_profit > market_vol else 'Sell'

    except Exception:
        print('Cannot retrieve data for : {}'.format(stock))
        pass

    return market_cap, gross_profit, price, low, high, vol, market_vol, profit, action, ave_vol_10_days


def display_full_table_faster(list_of_existing_stocks):
    pd.set_option('display.float_format',
                  lambda x: '%.3f' % x)  # to display without scientific format
    pd.options.display.float_format = '{:,}'.format

    # the dictionary to pass to pandas dataframe
    d = {}

    # Example data to loop and append to a dataframe
    for i, stock in enumerate(list_of_existing_stocks):
        print('processing stock:', stock)
        # get history
        market_cap, gross_profit, price, low, high, vol, market_vol, profit, action, ave_vol_10_days = get_all_stock_info(
            stock)
        volume_stability = 'stable' if vol > ave_vol_10_days else 'unstable'

        try:
            data = {'Symbol': stock,
                    'Gross Profit': gross_profit,
                    'Market Cap': float(np.round(market_cap, -3)),
                    'Market size': np.round(market_vol, -3),
                    'Profit': int(profit),
                    'Action': action,
                    'Low': np.round(low, 2),
                    'Price': np.round(price, 2),
                    'High': np.round(high, 2),
                    'Share Volume': float(vol),
                    'Average Volume 10 days': float(np.round(ave_vol_10_days, 2)),
                    'Volatility': volume_stability
                    }
            d[i] = data
        except Exception:
            print('Data issue: {}'.format(stock))

    df = pd.DataFrame.from_dict(d, "index")
    return df


def get_stock_table_with_formatting(stock_list=list_of_existing_stocks[:3]):
    stock_table = display_full_table_faster(stock_list)
    stock_table[['Gross Profit', 'Market Cap', 'Market size']].style.format('${:,.0f}')
    stock_table[['Low', 'Price', 'High']].style.format('${:,.2f}')
    stock_table[['Share Volume', 'Average Volume 10 days']].style.format('{:,.0f}')

    column_names_currency = ['Market Cap', 'Gross Profit', 'Price', 'Low', 'High', 'Market size']
    for col_name in column_names_currency:
        stock_table[col_name] = stock_table[col_name].map('${:,.2f}'.format)

    #stock_table.head()
    return stock_table


"""## Display Table - might take 5min to generate all the stock information"""
if __name__ == "__main__":
    get_stock_table_with_formatting(list_of_existing_stocks)


